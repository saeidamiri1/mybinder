#' @param uniprot_dir Directory with the uniprot files with the mapping
#' information. Default '~/Box Sync/db/mist/'
#' @return A MIST compatible input file
#' @keywords mist, evidence, keys, apms
#' MQutil.MISTformat()
#' @export
MQutil.MISTformat <- function("C:/APEX/evidence.txt", "C:/APEX/KEYS.NucOnly.txt", "C:/APEX/", "HUMAN", "C:/APEX/"){
cat('\n>> GENERATING INPUT FILES FOR MIST USING MS.MS.Count\n')
cat('\tREADING IN DATA AND KEYS\n')
if(is.null(species)){
species <- "HUMAN"
cat("\t---species NOT SPECIFIED. USING DEFAULT: ",species,"\n")
}
if(is.null(uniprot_dir)){
uniprot_dir <- '~/Box Sync/db/mist/'
cat("\t---uniprot_dir NOT SPECIFIED. USING DEFAULT:  ",uniprot_dir,"\n")
}
data <- data.table(read.delim(input_file, stringsAsFactors=F))
keys <- data.table(read.delim(keys_file, stringsAsFactors = F))
cat('\tCHECKING DATA AND KEYS COLUMN NAMES\n')
tryCatch(setnames(data, 'Raw file', 'RawFile'), error=function(e) cat('\t---Raw file in evidence not found: trying Raw.file instead\n'))
tryCatch(setnames(data, 'Raw.file', 'RawFile'), error=function(e) cat('\t---Raw.file in evidence not found: trying Raw file instead\n'))
tryCatch(setnames(keys, 'Raw file', 'RawFile'), error=function(e) cat('\t---Raw file in keys not found: trying Raw.file instead\n'))
tryCatch(setnames(keys, 'Raw.file', 'RawFile'), error=function(e) cat('\t---Raw.file in keys not found: trying Raw file instead\n'))
tryCatch(setnames(data,'MS/MS Count','ms_spectral_counts'), error=function(e) cat('\t---MS/MS Count column not found in evidence file: trying MS.MS.Count instead\n'))
tryCatch(setnames(data,'MS.MS.Count','ms_spectral_counts'), error=function(e) cat('\t---MS.MS.Count column not found in evidence file: trying MS/MS Count instead\n'))
tryCatch(setnames(data,'MS.MS.count','ms_spectral_counts'), error=function(e) cat('\t---MS.MS.count column not found in evidence file: trying MS/MS Count instead\n'))
cat('\n\tVERIFYING DATA AND KEYS\n')
if(!'IsotopeLabelType' %in% colnames(data)) data[,IsotopeLabelType:='L']
data <- mergeMaxQDataWithKeys(data, keys, by = c('RawFile','IsotopeLabelType'))
data_sel <- data[,c('Proteins','Condition','BioReplicate','Run','RawFile','ms_spectral_counts'),with=F]
data_sel <- aggregate( ms_spectral_counts ~ Proteins+Condition+BioReplicate+Run+RawFile, data=data_sel, FUN = sum)
data_sel <- data.frame(data_sel, bait_name=paste(data_sel$Condition, data_sel$BioReplicate, data_sel$Run, sep='_'))
# clean up proteins & annotate
#~~~~~~~~~~~~~~~~~~~~~~~
# remove CON's
if( length(grep("^CON__",data_sel$Proteins))>0 ) data_sel = data_sel[-grep("^CON__",data_sel$Proteins),]
if( length(grep("^REV__",data_sel$Proteins))>0 ) data_sel = data_sel[-grep("^REV__",data_sel$Proteins),]
# remove the party sets
if( length(grep(";",data_sel$Proteins))>0 ) data_sel = data_sel[-grep(";",data_sel$Proteins),]     # NOTE!!! We lose a lot of entries this way... :\
# keep only uniprot id
#data_sel$uniprot_id = gsub("^.*\\|","", data_sel$Proteins)
data_sel$Proteins = gsub("(^.*\\|)([A-Z0-9]+)(\\|.*$)","\\2",data_sel$Proteins)
# remove blank protein names
if(any(data_sel$Proteins == "")){ data_sel <- data_sel[-which(data_sel$Proteins == ""),]}
# Add this column that it is required for the preprocessing done by mist
# (this column is generated by Prospector and it is used to eleminate peptides. In this case, does not apply but it has to be there)
data_sel$ms_unique_pep = ""
# re-order
data_sel <- data_sel[,c("RawFile",'Proteins','ms_unique_pep', 'ms_spectral_counts')]
# RENAMING!
names(data_sel) = c('id','ms_uniprot_ac','ms_unique_pep','ms_spectral_counts')
# remove interactions with ms_spectral_counts=0
if(any(data_sel$ms_spectral_counts == 0)) { data_sel <- data_sel[-which(data_sel$ms_spectral_counts==0),]}
# annotate proteins and add Masses for Mist
species_split = unlist(strsplit(species, "-"))
Uniprot = NULL
for(org in species_split){
cat(sprintf("\tLOADING %s\n",org))
tmp <- read.delim(sprintf("%s/uniprot_protein_descriptions_%s.txt",uniprot_dir,org), stringsAsFactors=F, quote="")
if(is.null(Uniprot)){
Uniprot = as.data.frame(tmp)
}else{
Uniprot = rbind(Uniprot, tmp)
}
}
cat('\tANNOTATING RESULTS...\n')
results_annotated = merge(data_sel, Uniprot, all.x=T, by.x='ms_uniprot_ac', by.y='Entry')
# Adding the Mass column: it is required for MIST for preprocessing!
# For that, we will calculate the mass of the whole protein just taking the average molecular
# weight of an amino acid: 110Da
results_annotated$Mass <- results_annotated$Length*110
# create output directory if it doesnt exist
if(!dir.exists(dirname(output_file))){
dir.create(dirname(output_file), recursive =T)
}
write.table(results_annotated, file=output_file, eol='\n', sep='\t', quote=F, row.names=F, col.names=T)
cat('\n>> MIST FILES CREATED!\n')
keysout <- subset(keys, select = c(RawFile, Condition))
keysname <- gsub(".txt",'_mistkeys.txt', output_file)
write.table(keysout, file=keysname, eol = '\n', sep = '\t', quote = F, row.names = F, col.names = F)
cat('>> MIST keys FILE ALSO CREATED. Enjoy your day!\n\n')
}
cat('\tREADING IN DATA AND KEYS\n')
artmsEvidenceToSaintExpress(
evidence_file = "C:/APEX/evidence.txt",
keys_file = "C:/APEX/KEYS_CytoOnly.txt",
ref_proteome_file = "C:/APEX/swissprot_Human.fasta",
quant_variable = "msspc",
output_file = "C:/APEX/Cyto_only.txt",
verbose = TRUE
)
library(artMS)
artmsEvidenceToSaintExpress(
evidence_file = "C:/APEX/evidence.txt",
keys_file = "C:/APEX/KEYS_CytoOnly.txt",
ref_proteome_file = "C:/APEX/swissprot_Human.fasta",
quant_variable = "msspc",
output_file = "C:/APEX/Cyto_only.txt",
verbose = TRUE
)
biocLite(“Biostrings”)
biocLite(“Biostrings”)
source(“https://bioconductor.org/biocLite.R”)
source(“https://bioconductor.org/biocLite.R”)
source(“https://bioconductor.org/biocLite.R”)
library (signal)
install.packages("signal")
library (signal)
signal :: filter
library (signal)
data <- read.csv ("R:\preSGfilter.csv")
data <- read.csv ("R:/preSGfilter.csv")
data <- read.csv (file.choose"R:/preSGfilter.csv")
data <- read.csv (file.choose"R:/preSGfilter.csv")
data <- read.csv (file.choose())
data <- read.csv (file.choose())\
data <- read.csv (file.choose())
data <- read.csv (file.choose())
data <- read.csv (file.choose())
view(data)
data
data <- read.csv (file.choose(), header = true)
data <- read.csv (file.choose(), header = true)
data <- read.csv (file.choose(), header = true)
data <- read.csv (file.choose(), header = TRUE)
data <- read.csv (file.choose(), header = TRUE)
data
data <- read.csv (file.choose(), header = TRUE)
data
data$smoothed <- sgolayfilt(x,p=1, n=21, m=0, ts=0)
data$smoothed <- sgolayfilt(data&mTP,p=1, n=21, m=0, ts=0)
data$smoothed <- sgolayfilt(data&csv,p=1, n=21, m=0, ts=0)
data$smoothed <- sgolayfilt(data&,p=1, n=21, m=0, ts=0)
data$smoothed <- sgolayfilt(data& p=1, n=21, m=0, ts=0)
source('~/.active-rstudio-document', echo=TRUE)
data$smoothed <- sgolayfilt(data&x p=1, n=21, m=0, ts=0)
data$smoothed <- sgolayfilt(data&x, p=1, n=21, m=0, ts=0)
cars <- c(1,3,6,4,9)
plot(cars)
plot()
plot(cars, type="o", col="blue")
## CRAN
install.packages("PTXQC")
help(package="PTXQC")
browseVibnettes(packate='PTXQC')
library(PTXQC)
createReport(txt_folder= "R:/TH_n18_MBR_resultscopied/combined/txt")
warnings()
createReport(txt_folder= "R:/HeLA QC/combined/txt")
createReport(txt_folder= "R:/MBR7min/combined/txt")
library(PTXQC)
createReport(txt_folder= "R:/MBR7min/combined/txt")
BiocManager::install("DEP")
library("DEP")
run_app("LFQ")
librar(pdc)
library(pdc)
test <- load.csv(file.choose())
test <- read.csv(file.choose())
test <- read.csv(file.choose())
View(test)
pdclust(test)
plot(test)
clust <- pdclust(test)
plot(clust)
plot(clust, p.values=TRUE)
MFMTSonly100 <- read.csv(file.choose())
MFclust <- pdclust(MFMTSonly100)
plot(MFcluts)
plot(MFclust)
plot(MFclust, p.values=TRUE)
plot(MFclust, p.valus=TRUE)
plot(MFclust, p.values=TRUE)
plot(MFclust, p.values=TRUE)
plot(MFclust, p.values=T)
plot(MFclust, labels = MFclust$labels, p.values=T)
plot(cex=0.2)
plot(MFclust, labels = MFclust$labels, p.values=T, cex=0.2)
plot(MFclust, labels = MFclust$labels, p.values=T, cex=0.1)
plot(MFclust, labels = MFclust$labels, p.values=T, hang=-1, cex=0.1)
plot(MFclust, labels = MFclust$labels, p.values=T, hang=-1, cex=0.1, h=0.75)
plot(MFclust, labels = MFclust$labels, p.values=T, hang=-1, cex=0.1)
install.packages("pacman")
pacman::p_load(pdc, phylogram)
write.dendrogram(clust,file="", append=FALSE,edges=TRUE)
View(clust)
install.packages("devtools")
library(devtools)
install_github("zimmerlab/MS-EmpiRe")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
shiny::runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
View(MPC_1)
View(MPC_1)
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
View(MPC_1)
View(MPC_1)
View(MPC_1)
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
View(MPC_1)
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp()
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
View(XYCG)
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp()
runApp()
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp()
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp()
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp()
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
runApp('C:/Users/Trempe Lab/Downloads/MTS -20210823T190740Z-001/MTS')
library(artMS)
getRVersion()
getRVersion()
BiocManager::install("BiocVersion")
getRversion()
BiocManager::install("BiocVersion")
install.packages("BiocManager")
BiocManager::install("BiocVersion")
install.packages("remotes")
remotes::install_github("kroganlab/artMS")
shiny::runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp()
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
View(MPC)
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
runApp('Q:/Jerry/MTS_new/MTS')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
# Dashboard v 0.1, 2021/08/18
install.packages('rsconnect')
runApp()
install.packages('rsconnect')
runApp()
runApp()
runApp()
View(ClinVarMutations)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('/Volumes/F/mni/project/MTS/MTS1000')
library(shiny)
library(shinydashboard)
library(DT)
library(data.table)
library(ggplot2)
library(plotly)
library(tidyverse)
XYcurves = readRDS('XYcurves.RDS')
XYcurves_1<-melt(XYcurves, id.vars=c('X'))
XYcurves_1$amini.acid<-as.numeric(XYcurves_1$variable)
XYcurves_1$value<-as.numeric(XYcurves_1$value)
XYcurves_1<-XYcurves_1[,-2]
colnames(XYcurves_1)[1]<-"Genes"
#XYcurves = read.csv2('./dataset/XYcurves.csv',,sep = ',')
#saveRDS(XYcurves,file ='XYcurves.RDS')
XYcurves = readRDS('XYcurves.RDS')
XYcurves = read.csv2('./dataset/XYcurves.csv',,sep = ',')
XYcurves = read.csv2('./dataset/XYcurves.csv',,sep = ',')
setwd('/Volumes/F/mni/project/MTS/MTS1000')
#saveRDS(XYcurves,file ='XYcurves.RDS')
XYcurves = readRDS('XYcurves.RDS')
XYcurves_1<-melt(XYcurves, id.vars=c('X'))
XYcurves_1$amini.acid<-as.numeric(XYcurves_1$variable)
#saveRDS(XYcurves,file ='XYcurves.RDS')
XYcurves = readRDS('XYcurves.RDS')
XYcurves_1<-melt(XYcurves, id.vars=c('X'))
XYcurves = read.csv2('./dataset/XYcurves.csv',,sep = ',')
XYcurves_1<-melt(XYcurves, id.vars=c('X'))
XYcurves_1$amini.acid<-as.numeric(XYcurves_1$variable)
XYcurves_1$value<-as.numeric(XYcurves_1$value)
XYcurves_1<-XYcurves_1[,-2]
colnames(XYcurves_1)[1]<-"Genes"
library(reshape2)
XYcurves = read.csv2('./dataset/XYcurves.csv',,sep = ',')
XYcurves_1<-melt(XYcurves, id.vars=c('X'))
XYcurves_1$amini.acid<-as.numeric(XYcurves_1$variable)
XYcurves_1$value<-as.numeric(XYcurves_1$value)
XYcurves_1<-XYcurves_1[,-2]
colnames(XYcurves_1)[1]<-"Genes"
runApp()
XYcurves_1<-melt(XYcurves, id.vars=c('X'))
XYcurves_1$amini.acid<-as.numeric(XYcurves_1$variable)
XYcurves_1$value<-as.numeric(XYcurves_1$value)
XYcurves_1<-XYcurves_1[,-2]
colnames(XYcurves_1)[1]<-"Genes"
#ClinVarMutations = read.csv2('./dataset/ClinVarMutations.csv',sep = ',')
#saveRDS(ClinVarMutations,file ='ClinVarMutations.RDS')
ClinVarMutations = readRDS('ClinVarMutations.RDS')
ClinVarMutations_1=data.frame(GeneSymbol=ClinVarMutations$GeneSymbol,ColourDot=ClinVarMutations$ColourDot,amino.acid=ClinVarMutations$amino.acid,ProteinChange=ClinVarMutations$Protein.Change, NTChange=ClinVarMutations$NT.Change  )
XYcurves_ClinVarMutations<-merge(XYcurves_1, ClinVarMutations_1, by.x=c('Genes','amini.acid'), by.y=c('GeneSymbol','amino.acid'), sort = TRUE)
XYcurves_ClinVarMutations$label<-NULL
XYcurves_ClinVarMutations$label[XYcurves_ClinVarMutations$ColourDot=="Red"]<- "Pathogenic"
XYcurves_ClinVarMutations$label[XYcurves_ClinVarMutations$ColourDot=="Black"]<-"Uncertain"
XYcurves_ClinVarMutations$label[XYcurves_ClinVarMutations$ColourDot=="Green"]<-"benign"
#MitoFates = read.csv2('./dataset/MitoFates.csv',sep = ',')
#saveRDS(MitoFates,file ='MitoFates.RDS')
MitoFates = readRDS('MitoFates.RDS')
MitoFates_1=MitoFates[,1:8]
#GnomADVariants = read.csv2('./dataset/GnomADVariants.csv',sep = ',')
#saveRDS(GnomADVariants,file ='GnomADVariants.RDS')
GnomADVariants = readRDS('GnomADVariants.RDS')
head(GnomADVariants)
XYCG<- merge(XYcurves_ClinVarMutations, GnomADVariants, by.x=c('Genes','amini.acid'), by.y=c('Gene','amino.acid'), all = TRUE)
XYCG<- merge(XYcurves_ClinVarMutations, GnomADVariants, by.x=c('Genes','amini.acid'), by.y=c('Gene','amino.acid'), all = TRUE)
XYcurves = read.csv2('./dataset/XYcurves.csv',,sep = ',')
#saveRDS(XYcurves,file ='XYcurves.RDS')
XYcurves = readRDS('XYcurves.RDS')
XYcurves_1<-melt(XYcurves, id.vars=c('X'))
XYcurves_1$amini.acid<-as.numeric(XYcurves_1$variable)
XYcurves_1$value<-as.numeric(XYcurves_1$value)
XYcurves_1<-XYcurves_1[,-2]
colnames(XYcurves_1)[1]<-"Genes"
ClinVarMutations = read.csv2('./dataset/ClinVarMutations.csv',sep = ',')
#saveRDS(ClinVarMutations,file ='ClinVarMutations.RDS')
ClinVarMutations = readRDS('ClinVarMutations.RDS')
ClinVarMutations_1=data.frame(GeneSymbol=ClinVarMutations$GeneSymbol,ColourDot=ClinVarMutations$ColourDot,amino.acid=ClinVarMutations$amino.acid,ProteinChange=ClinVarMutations$Protein.Change, NTChange=ClinVarMutations$NT.Change  )
XYcurves_ClinVarMutations<-merge(XYcurves_1, ClinVarMutations_1, by.x=c('Genes','amini.acid'), by.y=c('GeneSymbol','amino.acid'), sort = TRUE)
XYcurves_ClinVarMutations$label<-NULL
XYcurves_ClinVarMutations$label[XYcurves_ClinVarMutations$ColourDot=="Red"]<- "Pathogenic"
XYcurves_ClinVarMutations$label[XYcurves_ClinVarMutations$ColourDot=="Black"]<-"Uncertain"
XYcurves_ClinVarMutations$label[XYcurves_ClinVarMutations$ColourDot=="Green"]<-"benign"
MitoFates = read.csv2('./dataset/MitoFates.csv',sep = ',')
#saveRDS(MitoFates,file ='MitoFates.RDS')
MitoFates = readRDS('MitoFates.RDS')
MitoFates_1=MitoFates[,1:8]
MitoFates = read.csv2('./dataset/MitoFates.csv',sep = ',')
MitoFates = read.csv2('./dataset/MitoFates.csv',sep = ',')
#saveRDS(MitoFates,file ='MitoFates.RDS')
#MitoFates = readRDS('MitoFates.RDS')
MitoFates_1=MitoFates[,1:8]
GnomADVariants = read.csv2('./dataset/GnomADVariants.csv',sep = ',')
saveRDS(GnomADVariants,file ='GnomADVariants.RDS')
#GnomADVariants = readRDS('GnomADVariants.RDS')
head(GnomADVariants)
XYCG<- merge(XYcurves_ClinVarMutations, GnomADVariants, by.x=c('Genes','amini.acid'), by.y=c('Gene','amino.acid'), all = TRUE)
XYCG$join=paste(XYCG[,7],XYCG[,11], sep=":")
save(GnomADVariants,file ='GnomADVariants.RDATA')
GnomADVariants = read.csv2('./dataset/GnomADVariants.csv',sep = ',')
save(GnomADVariants,file ='GnomADVariants.RDATA')
GnomADVariants = read('GnomADVariants.RDS')
save_image(file='all.RData)
save_image(file='all.RData')
XYcurves = read.csv2('./dataset/XYcurves.csv',,sep = ',')
XYcurves = read.csv2('./dataset/XYcurves.csv',,sep = ',')
#saveRDS(XYcurves,file ='XYcurves.RDS')
XYcurves = readRDS('XYcurves.RDS')
XYcurves_1<-melt(XYcurves, id.vars=c('X'))
library(shiny)
library(shinydashboard)
library(DT)
library(data.table)
library(ggplot2)
library(plotly)
library(tidyverse)
library(reshape2)
XYcurves = readRDS('XYcurves.RDS')
XYcurves_1<-melt(XYcurves, id.vars=c('X'))
XYcurves_1$amini.acid<-as.numeric(XYcurves_1$variable)
XYcurves_1$value<-as.numeric(XYcurves_1$value)
XYcurves_1<-XYcurves_1[,-2]
colnames(XYcurves_1)[1]<-"Genes"
#saveRDS(ClinVarMutations,file ='ClinVarMutations.RDS')
ClinVarMutations = readRDS('ClinVarMutations.RDS')
ClinVarMutations_1=data.frame(GeneSymbol=ClinVarMutations$GeneSymbol,ColourDot=ClinVarMutations$ColourDot,amino.acid=ClinVarMutations$amino.acid,ProteinChange=ClinVarMutations$Protein.Change, NTChange=ClinVarMutations$NT.Change  )
XYcurves_ClinVarMutations<-merge(XYcurves_1, ClinVarMutations_1, by.x=c('Genes','amini.acid'), by.y=c('GeneSymbol','amino.acid'), sort = TRUE)
XYcurves_ClinVarMutations$label<-NULL
XYcurves_ClinVarMutations$label[XYcurves_ClinVarMutations$ColourDot=="Red"]<- "Pathogenic"
XYcurves_ClinVarMutations$label[XYcurves_ClinVarMutations$ColourDot=="Black"]<-"Uncertain"
XYcurves_ClinVarMutations$label[XYcurves_ClinVarMutations$ColourDot=="Green"]<-"benign"
MitoFates = read.csv2('./dataset/MitoFates.csv',sep = ',')
#saveRDS(MitoFates,file ='MitoFates.RDS')
#MitoFates = readRDS('MitoFates.RDS')
MitoFates_1=MitoFates[,1:8]
GnomADVariants = read('GnomADVariants.RDS')
GnomADVariants = readRDS('GnomADVariants.RDS')
head(GnomADVariants)
XYCG<- merge(XYcurves_ClinVarMutations, GnomADVariants, by.x=c('Genes','amini.acid'), by.y=c('Gene','amino.acid'), all = TRUE)
#XYcurves = read.csv2('./dataset/XYcurves.csv',,sep = ',')
#saveRDS(XYcurves,file ='XYcurves.RDS')
XYcurves = readRDS('XYcurves.RDS')
XYcurves_1<-melt(XYcurves, id.vars=c('X'))
XYcurves_1$amini.acid<-as.numeric(XYcurves_1$variable)
XYcurves_1$value<-as.numeric(XYcurves_1$value)
XYcurves_1<-XYcurves_1[,-2]
colnames(XYcurves_1)[1]<-"Genes"
ClinVarMutations = readRDS('ClinVarMutations.RDS')
ClinVarMutations_1=data.frame(GeneSymbol=ClinVarMutations$GeneSymbol,ColourDot=ClinVarMutations$ColourDot,amino.acid=ClinVarMutations$amino.acid,ProteinChange=ClinVarMutations$Protein.Change, NTChange=ClinVarMutations$NT.Change  )
XYcurves_ClinVarMutations<-merge(XYcurves_1, ClinVarMutations_1, by.x=c('Genes','amini.acid'), by.y=c('GeneSymbol','amino.acid'), sort = TRUE)
XYcurves_ClinVarMutations$label<-NULL
XYcurves_ClinVarMutations$label[XYcurves_ClinVarMutations$ColourDot=="Red"]<- "Pathogenic"
XYcurves_ClinVarMutations$label[XYcurves_ClinVarMutations$ColourDot=="Black"]<-"Uncertain"
XYcurves_ClinVarMutations$label[XYcurves_ClinVarMutations$ColourDot=="Green"]<-"benign"
#saveRDS(MitoFates,file ='MitoFates.RDS')
MitoFates = readRDS('MitoFates.RDS')
GnomADVariants = readRDS('GnomADVariants.RDS')
head(GnomADVariants)
XYCG<- merge(XYcurves_ClinVarMutations, GnomADVariants, by.x=c('Genes','amini.acid'), by.y=c('Gene','amino.acid'), all = TRUE)
XYCG$join=paste(XYCG[,7],XYCG[,11], sep=":")
XYCG<- merge(XYcurves_ClinVarMutations, GnomADVariants, by.x=c('Genes','amini.acid'), by.y=c('Gene','amino.acid'), all = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp('~/Downloads/MTS')
getwd()
runApp()
runApp('~/Downloads/MTS')
